{"version":3,"sources":["redux/actions.js","redux/actionTypes.js","constants.js","components/Feedback.js","components/searchBookItem.js","components/search.js","components/listBookItem.js","components/lists.js","views/App.js","redux/reducers/index.js","redux/reducers/searches.js","redux/reducers/lists.js","redux/reducers/userFeedback.js","index.js"],"names":["getMyBookLists","dispatch","Axios","get","then","response","receiveMyBookLists","data","error","handleGetError","receiveSearchList","searchListInfo","type","payload","myBooks","myBookLists","handleSuccess","handleTwiceAddError","handleUpdateError","handleDeleteError","handleAPIError","handleDisplaySearched","searchInitialState","queryResult","listsInitialState","toRead","haveRead","UI_FLAG_GET_FAIL","feedbackInitialState","flag","message","Feedback","props","state","modalOpen","toggle","bind","this","setState","uiErrorReset","Modal","isOpen","checkError","ModalBody","setMessage","ModalFooter","Button","onClick","Component","connect","userFeedback","SearchBookItem","addAndDelete","markType","add","book","delete","formattedAuthors","authorList","formattedListString","length","i","Container","CardText","authors","outline","color","className","size","newMarkType","post","title","id","addToMyBookLists","bookInfo","deleteSearchBook","Search","search","onFieldChange","event","target","value","Form","inline","InputGroup","Input","onChange","searchBooks","Row","Col","Card","CardHeader","CardBody","renderSearchList","searchList","map","key","CardTitle","query","apiQuery","replace","bookHelper","items","volumeInfo","ListBookItem","update","markTypeTitle","put","updateMyBookLists","deleteFromMyLists","Lists","onMount","toReadList","haveReadList","bookLists","App","showLists","toggleView","combineReducers","action","Object","assign","filter","store","createStore","indexReducer","applyMiddleware","thunkMiddleware","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.9acb2be4.chunk.js","sourcesContent":["import {\n    RECEIVE_SEARCHED_BOOKS, RECEIVE_MY_BOOKS, RESET_ERROR, HANDLE_SUCCESS, HANDLE_DELETE_ERROR, HANDLE_UPDATE_ERROR,\n    HANDLE_ADD_TWICE_ERROR, DELETE_SEARCH_BOOK, HANDLE_GET_ERROR, HANDLE_SEARCH_DISPLAY_ERROR, HANDLE_API_ERROR\n} from './actionTypes';\nimport Axios from 'axios';\n\nexport function search(query) {\n    const apiQuery = bookHelper(query)\n    return function (dispatch) {\n        // Retrieve Books from the Google Books API\n        return Axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + apiQuery + \"&key=\" + process.env.REACT_APP_GOOGLE_BOOKS_API_KEY)\n            .then(response => {\n                return response.data.items.map((book) => {\n                    return (\n                        {\n                            title: book.volumeInfo.title,\n                            authors: book.volumeInfo.authors,\n                            id: book.id\n                        })\n                })\n            }, error => dispatch(handleAPIError(error))\n                // Update store with the searched book results\n            ).then(response => dispatch(receiveSearchList(response)),\n                error => dispatch(handleDisplaySearched(error)))\n    }\n}\n\nexport function getMyBookLists() {\n    return function (dispatch) {\n        return Axios.get('/api/books/')\n            .then(response => dispatch(receiveMyBookLists(response.data)),\n                error => dispatch(handleGetError(error)))\n    }\n}\n\nexport function addToMyBookLists(book, newMarkType) {\n    return function (dispatch) {\n        return Axios.post('/api/books/', {\n            title: book.title,\n            authors: book.authors,\n            id: book.id,\n            markType: newMarkType\n        }).then(response => dispatch(handleSuccess(response)),\n            error => dispatch(handleTwiceAddError(error)))\n    }\n}\n\n// TODO: Figure out how to handle \"response\"\nexport function updateMyBookLists(book, newMarkType) {\n    return function (dispatch) {\n        return Axios.put('/api/books/' + book.id, {\n            title: book.title,\n            authors: book.authors,\n            id: book.id,\n            markType: newMarkType\n        }).then(response => dispatch(handleSuccess(response)),\n            error => dispatch(handleUpdateError(error))\n        ).then(dispatch(getMyBookLists()));\n    }\n}\n\nexport function deleteFromMyLists(book, markType) {\n    return function (dispatch) {\n        return Axios.delete('/api/books/' + book.id, {\n            title: book.title,\n            authors: book.authors,\n            id: book.id,\n            markType: markType\n        }).then(response => dispatch(handleSuccess(response)),\n            error => dispatch(handleDeleteError(error))\n        ).then(dispatch(getMyBookLists()));\n    }\n}\n\n// Manipulate Search Results Lists\nexport const receiveSearchList = (searchListInfo) => ({\n    type: RECEIVE_SEARCHED_BOOKS,\n    payload: searchListInfo // [Books]\n})\n\nexport const deleteSearchBook = (book) => ({\n    type: DELETE_SEARCH_BOOK,\n    bookInfo: book\n})\n\n// Get MyLists to components via Redux store\nexport const receiveMyBookLists = (myBooks) => ({\n    type: RECEIVE_MY_BOOKS,\n    myBookLists: myBooks // [toRead], [haveRead]\n})\n\n// Handle success and errors\nexport const handleSuccess = () => ({\n    type: HANDLE_SUCCESS\n})\n\nexport const uiErrorReset = () => ({\n    type: RESET_ERROR\n})\n\nexport const handleTwiceAddError = () => ({\n    type: HANDLE_ADD_TWICE_ERROR\n})\n\nexport const handleUpdateError = () => ({\n    type: HANDLE_UPDATE_ERROR\n})\n\nexport const handleDeleteError = () => ({\n    type: HANDLE_DELETE_ERROR\n})\n\nexport const handleGetError = () => ({\n    type: HANDLE_GET_ERROR\n})\n\nexport const handleAPIError = () => ({\n    type: HANDLE_API_ERROR\n})\n\nexport const handleDisplaySearched = () => ({\n    type: HANDLE_SEARCH_DISPLAY_ERROR\n})\n\n// Helpers\nfunction bookHelper(query) {\n    return query.replace(/ /g, \"+\")\n}","export const RECEIVE_SEARCHED_BOOKS = \"RECEIVE SEARCH RESULTS\";\nexport const RECEIVE_MY_BOOKS = \"RECEIVE MY BOOKS\";\nexport const ADD_TO_MY_LIST = \"ADD SEARCH BOOK TO ONE OF MY LISTS\";\nexport const UPDATE_MY_LIST = \"UPDATE TO READ AND HAVE READ LISTS\"\nexport const DELETE_SEARCH_BOOK = \"DELETE SEARCH BOOK\";\n\nexport const HANDLE_SUCCESS = \"HANDLE SUCCESS\";\nexport const RESET_ERROR = \"RESET ERROR\";\n\nexport const HANDLE_GET_ERROR = \"HANDLE GET LISTS ERROR\";\nexport const HANDLE_ADD_TWICE_ERROR = \"HANDLE ADD TWICE ERROR\";\nexport const HANDLE_UPDATE_ERROR = \"HANDLE UPDATE ERROR\";\nexport const HANDLE_DELETE_ERROR = \"HANDLE DELETE ERROR\";\nexport const HANDLE_API_ERROR = \"HANDLE API ERROR\";\nexport const HANDLE_SEARCH_DISPLAY_ERROR = \"HANDLE SEARCH DISPLAY ERROR\";\n","export const searchInitialState = { queryResult: [] };\n\nexport const listsInitialState = {\n    toRead: [],\n    haveRead: []\n}\n\nexport const MARK_TO_READ_BUTTON = \"Mark As Not Read\"\nexport const MARK_HAVE_READ_BUTTON = \"Mark As Read\"\n\n//UI feedback constants\nexport const UI_FLAG_RESOLVED = \"UI FLAG RESOLVED\";\nexport const UI_FLAG_SUCCESS = \"UI FLAG SUCCESS\";\n\nexport const UI_FLAG_GET_FAIL = \"UI FLAG FAILED TO RETRIEVE LISTS\";\nexport const UI_FLAG_UPDATE_ERROR = \"UI FLAG UPDATE ERROR\";\nexport const UI_FLAG_DELETE_ERROR = \"UI FLAG DELETE ERROR\";\nexport const UI_FLAG_ADD_BOOK_TWICE = \"UI FLAG ADD BOOK TWICE ERROR\";\nexport const UI_FLAG_API_ERROR = \"UI FLAG API ERROR\";\nexport const UI_FLAG_DISPLAY_ERROR = \"UI FLAG DISPLAY ERROR\";\n\nexport const feedbackInitialState = { flag: UI_FLAG_SUCCESS, message: \"\" };\n","import React, { Component } from 'react';\nimport { Modal, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { uiErrorReset } from '../redux/actions';\nimport {\n    UI_FLAG_RESOLVED, UI_FLAG_SUCCESS, UI_FLAG_GET_FAIL, UI_FLAG_DISPLAY_ERROR,\n    UI_FLAG_API_ERROR, UI_FLAG_UPDATE_ERROR, UI_FLAG_DELETE_ERROR, UI_FLAG_ADD_BOOK_TWICE\n} from '../constants';\n\nclass Feedback extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modalOpen: false,\n            message: \"\"\n        }\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({ modalOpen: !this.state.modalOpen })\n        this.props.uiErrorReset();\n    }\n\n    setMessage() {\n        switch (this.props.flag) {\n            case (UI_FLAG_API_ERROR): {\n                return \"Could not fetch search results\";\n            } case (UI_FLAG_DISPLAY_ERROR): {\n                return \"Could not display search results\";\n            } case (UI_FLAG_GET_FAIL): {\n                return \"Could not retrieve your lists\";\n            } case (UI_FLAG_UPDATE_ERROR): {\n                return \"Could not update the book list placement\";\n            } case (UI_FLAG_DELETE_ERROR): {\n                return \"Could not delete book\";\n            } case (UI_FLAG_ADD_BOOK_TWICE): {\n                return \"Error: You can not add the same book twice\";\n            }\n            default: {\n                return \"\"\n            }\n        }\n    }\n\n    checkError() {\n        if (this.props.flag !== UI_FLAG_RESOLVED && this.props.flag !== UI_FLAG_SUCCESS) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    render() {\n        return (\n            <Modal isOpen={this.checkError()} toggle={this.toggle}>\n                <ModalBody >\n                    <h5>{this.setMessage()}</h5>\n                </ModalBody>\n                <ModalFooter>\n                    <Button onClick={this.toggle}>Exit</Button>\n                </ModalFooter>\n            </Modal>\n        )\n    }\n}\n\nlet mapStateToProps = function (state, props) {\n    return {\n        flag: state.userFeedback.flag\n    }\n}\n\nexport default connect(mapStateToProps, { uiErrorReset })(Feedback);","import React, { Component } from 'react';\nimport { CardText,Button, Container } from 'reactstrap';\nimport{ connect } from 'react-redux';\nimport { addToMyBookLists, deleteSearchBook } from '../redux/actions';\nimport { MARK_TO_READ_BUTTON, MARK_HAVE_READ_BUTTON } from '../constants';\n \nclass SearchBookItem extends Component {\n  \n  render() {\n    return (\n      <Container>\n        <CardText>{this.formattedAuthors(this.props.book.authors)}</CardText>\n        {/* Mark as To Read Button */}\n        <Button outline color=\"primary\" className=\"mb-3\" size=\"sm\"\n        onClick={ () => this.addAndDelete(\"toRead\") }>\n        { MARK_TO_READ_BUTTON }</Button>\n\n        {/* Mark As Have Read Button */}\n        <Button outline color=\"primary\" className=\"mb-3\" size=\"sm\" \n        onClick={ () => this.addAndDelete(\"haveRead\") }>\n        { MARK_HAVE_READ_BUTTON }</Button>\n      </Container>\n    )\n  }\n\n  addAndDelete = (markType) => {\n    this.props.add(this.props.book, markType)\n    this.props.delete(this.props.book)\n  }\n\n  formattedAuthors = (authorList) => {\n    let formattedListString = \"\"\n    if (authorList.length === 0) {\n      formattedListString += \"No Author Listed\"\n    } else {\n      formattedListString += \"By: \"\n      if (authorList.length === 1) {\n        formattedListString += authorList[0]\n      } else {\n        for (let i=0; i<authorList.length-1; i+=1) {\n          formattedListString += authorList[i] + \", \"\n        }\n        formattedListString += authorList[authorList.length-1]\n      }\n    }\n    return formattedListString;\n  }\n}\n\nlet mapDispatchToProps = function mapDispatchToProps(dispatch, props) {\n  return { \n    add: (book, markType) => dispatch(addToMyBookLists(book, markType)), \n    delete: (book) => dispatch(deleteSearchBook(book))\n  }\n}\n\nlet mapStateToProps = function (state, props) {\n  return {\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBookItem);","import React, { Component } from 'react';\nimport { Form, InputGroup, Button, Input, Row, Col, Card, CardTitle, CardHeader, CardBody } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { search } from '../redux/actions';\nimport SearchBookItem from './searchBookItem';\n\nclass Search extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      search: \"\"\n    }\n\n    this.onFieldChange = this.onFieldChange.bind(this);\n  }\n\n  onFieldChange(event) {\n    this.setState({ [event.target.id]: event.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n\n        <Form inline>\n          <InputGroup>\n            <Input type=\"text\" id=\"search\" value={this.state.search} onChange={this.onFieldChange} />\n            <Button className=\"custom-blue mb-3\" onClick={() => this.props.searchBooks(this.state.search)}>Search</Button>\n          </InputGroup>\n        </Form>\n\n        <Row>\n          <Col>\n            <Card >\n              <CardHeader><h5>Results</h5></CardHeader>\n              <CardBody>\n                {this.renderSearchList()}\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n\n  renderSearchList() {\n    if (this.props.searchList && this.props.searchList.length > 0) {\n      const bookList = this.props.searchList.map((book) =>\n        <div key={book.id}>\n          <CardTitle>{book.title}</CardTitle>\n          <SearchBookItem book={book} />\n        </div>)\n      return (bookList)\n    }\n    return null;\n  }\n}\n\nlet mapStateToProps = function (state, props) {\n  return {\n    searchList: state.search.queryResult\n  }\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    searchBooks: (props) => dispatch(search(props))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","\nimport React, { Component } from 'react';\nimport { CardText, Button, Container } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { updateMyBookLists, deleteFromMyLists } from '../redux/actions'\n\nclass ListBookItem extends Component {\n  render() {\n    return (\n      <Container>\n        <CardText>{this.formattedAuthors(this.props.book.authors)}</CardText>\n        {/* Move Book Button */}\n        <Button outline color=\"primary\" className=\"mb-3\" size=\"sm\"\n          onClick={() => { this.props.update(this.props.book, this.props.markType) }}>\n          {this.props.markTypeTitle} </Button>\n\n        {/* Delete Book Button */}\n        <Button outline color=\"danger\" className=\"mb-3\" size=\"sm\" onClick={() => { this.props.delete(this.props.book, this.props.markType) }} >Delete</Button>\n\n      </Container>\n    )\n  }\n\n  formattedAuthors = (authorList) => {\n    let formattedListString = \"\"\n    if (authorList.length === 0) {\n      formattedListString += \"No Author Listed\"\n    } else {\n      formattedListString += \"By: \"\n      if (authorList.length === 1) {\n        formattedListString += authorList[0]\n      } else {\n        for (let i=0; i<authorList.length-1; i+=1) {\n          formattedListString += authorList[i] + \", \"\n        }\n        formattedListString += authorList[authorList.length-1]\n      }\n    }\n    return formattedListString;\n  }\n}\n\nlet mapDispatchToProps = function mapDispatchToProps(dispatch, props) {\n  return {\n    // moves a book to the given \"markType\" (toRead or haveRead)\n    update: (book, newMarkType) => dispatch(updateMyBookLists(book, newMarkType)),\n    delete: (book, markType) => dispatch(deleteFromMyLists(book, markType))\n  }\n}\n\nlet mapStateToProps = function (state, props) {\n  return {\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListBookItem);","import React, { Component } from 'react';\nimport BookItem from './listBookItem';\nimport { connect } from 'react-redux';\nimport { Container, Card, CardTitle, CardHeader, CardBody, Row, Col } from 'reactstrap';\nimport { getMyBookLists } from '../redux/actions'\nimport {MARK_HAVE_READ_BUTTON, MARK_TO_READ_BUTTON} from '../constants'\n\nclass Lists extends Component {\n\n  componentDidMount() {\n    this.props.onMount();\n  }\n\n  render() {\n    return (\n      <div>\n        {/* To Read List  */}\n        <Container>\n          <Row>\n            <Col>\n            <Card >\n              <CardHeader><h5>To Read</h5></CardHeader>\n              {/* Book Items  */}\n              <CardBody>\n                  {this.props.toReadList.map((book)=>\n                    <div key={book.id}>\n                      <CardTitle>{book.title}</CardTitle>\n                          <BookItem className=\"mt-2\" book={book} markTypeTitle={MARK_HAVE_READ_BUTTON} markType=\"haveRead\" />\n                    </div>     \n                  )}      \n              </CardBody>\n            </Card>\n            </Col>\n          \n            {/* Have Read List  */}\n            <Col>\n            <Card >\n              <CardHeader><h5>Have Read</h5></CardHeader>\n              {/* Book Items  */}\n              <CardBody>\n                {this.props.haveReadList.map((book)=>\n                  <div key={book.id}>\n                    <CardTitle>{book.title}</CardTitle>\n                        <BookItem book={book} markTypeTitle={MARK_TO_READ_BUTTON} markType=\"toRead\" />\n                  </div>     \n                )}      \n              </CardBody>\n            </Card>\n            </Col>\n          </Row>\n          \n        </Container>\n      </div>\n    )\n  }\n}\n\nlet mapStateToProps = function mapStateToProps(state, props) {\n  return { \n    toReadList: state.bookLists.toRead,\n    haveReadList: state.bookLists.haveRead\n  }\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n      onMount: () => { dispatch(getMyBookLists())}\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lists);","\nimport React, { Component } from 'react';\nimport { Container, Button, Row, Col } from 'reactstrap';\nimport Feedback from \"../components/Feedback\";\nimport Search from '../components/search';\nimport Lists from '../components/lists';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showLists: false\n    }\n    this.toggleView = this.toggleView.bind(this);\n\n  }\n\n  toggleView() {\n    this.setState({ showLists: !this.state.showLists })\n  }\n\n  render() {\n    return (\n      <Container className=\"container\">\n        <h1>BookList App</h1>\n        <Feedback />\n        <Row>\n          <Col className=\"col-12 col-md-2 mt-4\">\n            {!this.state.showLists ? <Button className=\"custom-blue\" onClick={this.toggleView}>My Lists</Button>\n              : <Button className=\"custom-blue\" onClick={this.toggleView}>Back to Search</Button>}\n          </Col>\n          <Col className=\"col-12 col-md-8 offset-md-2 mt-4\">\n            {!this.state.showLists ? <Search /> : <Lists />}\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App;","import { combineReducers } from \"redux\";\nimport searches from './searches';\nimport list from \"./lists\";\nimport uiFeedback from './userFeedback';\n\nexport default combineReducers({\n    search: searches, // queryResult: [bookInfo]\n    bookLists: list, // toRead: [bookInfo], haveRead: [bookItem]\n    userFeedback: uiFeedback\n});\n","import { searchInitialState } from '../../constants';\nimport { DELETE_SEARCH_BOOK, RECEIVE_SEARCHED_BOOKS } from '../actionTypes';\n\nexport default function searches(state = searchInitialState, action) {\n    switch (action.type) {\n        case RECEIVE_SEARCHED_BOOKS: {\n            return { ...state, queryResult: action.payload }\n        }\n        case DELETE_SEARCH_BOOK: {\n            return Object.assign({}, state, {\n                queryResult: state.queryResult.filter((book) => book.id !== action.bookInfo.id)\n            })\n        }\n        default:\n            return state;\n    }\n}","// import { MOVE_BOOK, DELETE_BOOK, MARK_READ, MARK_NOT_READ} from \"../actionTypes\";\nimport { RECEIVE_MY_BOOKS } from \"../actionTypes\";\nimport { listsInitialState } from '../../constants';\n\nexport default function list(state = listsInitialState, action) {\n    switch (action.type) {\n        case RECEIVE_MY_BOOKS: {\n            return Object.assign({}, state, {\n                toRead: action.myBookLists.toRead,\n                haveRead: action.myBookLists.haveRead\n            })\n        }\n        default:\n            return state;\n    }\n}\n\n","import {\n    HANDLE_ADD_TWICE_ERROR, HANDLE_DELETE_ERROR, HANDLE_UPDATE_ERROR, HANDLE_GET_ERROR,\n    RESET_ERROR, HANDLE_SUCCESS, HANDLE_API_ERROR, HANDLE_SEARCH_DISPLAY_ERROR\n} from \"../actionTypes\";\nimport {\n    feedbackInitialState, UI_FLAG_RESOLVED, UI_FLAG_SUCCESS, UI_FLAG_DELETE_ERROR,\n    UI_FLAG_ADD_BOOK_TWICE, UI_FLAG_UPDATE_ERROR, UI_FLAG_GET_FAIL, UI_FLAG_API_ERROR, UI_FLAG_DISPLAY_ERROR\n} from \"../../constants\";\n\nexport default function uiFeedback(state = feedbackInitialState, action) {\n    switch (action.type) {\n        case HANDLE_SUCCESS: {\n            return { flag: UI_FLAG_SUCCESS }\n        } case HANDLE_API_ERROR: {\n            return { flag: UI_FLAG_API_ERROR };\n        } case HANDLE_SEARCH_DISPLAY_ERROR: {\n            return { flag: UI_FLAG_DISPLAY_ERROR };\n        } case HANDLE_GET_ERROR: {\n            return { flag: UI_FLAG_GET_FAIL };\n        } case HANDLE_UPDATE_ERROR: {\n            return { flag: UI_FLAG_UPDATE_ERROR };\n        } case HANDLE_ADD_TWICE_ERROR: {\n            return { flag: UI_FLAG_ADD_BOOK_TWICE };\n        } case HANDLE_DELETE_ERROR: {\n            return { flag: UI_FLAG_DELETE_ERROR };\n        } case RESET_ERROR: {\n            return { flag: UI_FLAG_RESOLVED };\n        } default:\n            return state;\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/styles.css\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\"\nimport App from \"./views/App\";\nimport indexReducer from \"./redux/reducers/index\"\nimport thunkMiddleware from 'redux-thunk';\n\nconst store = createStore(indexReducer, applyMiddleware(thunkMiddleware));\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n);\n"],"sourceRoot":""}